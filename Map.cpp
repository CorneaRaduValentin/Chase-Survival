#include "Map.h"
#include "TextureManager.h"
#include <SDL.h>
#include <iostream>
using namespace std;

/// lvl0 - prima harta - pentru inceput si acomodarea jucatorului (probabil voi folosi 3 monstri care se misca super lent) (edit: am folosit 4 monstruleti, tocmai sa se observe ca pot avea functionalitati diferite)
/// lvl1 - locul cald - probabil voi folosi 4 monstruleti cu viteze mai mari (edit: am folosit 3 monstruleti, dar am adaugat multe locuri greu accesibile)
/// lvl2 - podul - cel mai probabil o sa trec direct la 6 si locuri stramte, ca sa fie greu si pentru player sa reziste

int lvl0[25][32] = {
	{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,3,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,0,0,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3},

	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},

	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3},

	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3},
	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3},
	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3},
	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3},
	{3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3},

	{3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0}

};

int lvl1[25][32] = {
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6},
	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6},
	{6,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,6},
	{6,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,6},

	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6},
	{6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,5,5,5,5,5,6,6},
	{6,6,6,5,5,5,5,5,5,5,5,6,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6},
	{6,6,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6},
	{6,6,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6},

	{6,6,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6},
	{6,5,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,6,6},
	{6,5,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,6,6},
	{6,5,5,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6},
	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6},

	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,6},
	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,6},
	{6,5,5,6,5,5,5,5,5,5,5,5,5,5,5,6,6,5,5,5,6,6,6,5,5,5,5,5,5,5,5,6},
	{6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,6},
	{6,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,6},

	{6,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,6},
	{6,5,5,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,5,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}

};

int lvl2[25][32] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},

	{0,0,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},

	{0,0,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	{0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},

	{0,0,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
		
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

};

int Map::level = 0;

Map::Map(SDL_Renderer* renderer)
{
	this->renderer = renderer;
	dirt = TextureManager::LoadTexture("assets/dirt.png", renderer);
	grass = TextureManager::LoadTexture("assets/grass.png", renderer);
	water = TextureManager::LoadTexture("assets/water.png", renderer);
	wall = TextureManager::LoadTexture("assets/wall.png", renderer);
	wood = TextureManager::LoadTexture("assets/wood.png", renderer);
	lava = TextureManager::LoadTexture("assets/lava.png", renderer);
	lavapop = TextureManager::LoadTexture("assets/lavapop.png", renderer);

	switch (level)
	{
	case 0:
		LoadMap(lvl0);
		break;

	case 1:
		LoadMap(lvl1);
		break;

	case 2:
		LoadMap(lvl2);
		break;

	default:
		LoadMap(lvl0);
		break;
	}

	src.x = 0;
	src.y = 0;
	src.w = 32;
	src.h = 32;

	dest.x = 0;
	dest.y = 0;
	dest.w = 64;
	dest.h = 64;    
}

Map::~Map()
{

}

int Map::getLevel()
{
	return level;
}

void Map::lowerLevel()
{
	level--;
}

void Map::incLevel()
{
	level++;
}

void Map::LoadMap(int arr[25][32])
{

	for (int row = 0; row < 25; row++)
	{
		for (int column = 0; column < 32; column++)
		{
			map[row][column] = arr[row][column];
		}
	}
}

int** Map::getMap()
{
	int** v = new int* [25];
	for (int i = 0; i < 25; ++i)
		v[i] = new int[32];

	switch (level)
	{
	case 0:
		for (int i = 0; i < 25; ++i)
		{
			for (int j = 0; j < 32; ++j)
			{
				v[i][j] = lvl0[i][j];
			}
		}
		break;

	case 1:
		for (int i = 0; i < 25; ++i)
		{
			for (int j = 0; j < 32; ++j)
			{
				v[i][j] = lvl1[i][j];
			}
		}
		break;

	case 2:
		for (int i = 0; i < 25; ++i)
		{
			for (int j = 0; j < 32; ++j)
			{
				v[i][j] = lvl2[i][j];
			}
		}
		break;
	
	default:
		for (int i = 0; i < 25; ++i)
		{
			for (int j = 0; j < 32; ++j)
			{
				v[i][j] = lvl0[i][j];
			}
		}
		break;
	}

	return v;
}

void Map::DrawMap()
{
	int type = 0;
	for (int row = 0; row < 25; row++)
	{
		for (int column = 0; column < 32; column++)
		{
			type = map[row][column];

			dest.x = column * 32;
			dest.y = row * 32;
			switch (type)
			{
			case 0:
			{
				TextureManager::Draw(water, src, dest, renderer);
				break;
			}
			case 1:
			{
				TextureManager::Draw(grass, src, dest, renderer);
				break;
			}
			case 2:
			{
				TextureManager::Draw(dirt, src, dest, renderer);
				break;
			}
			case 3:
			{
				TextureManager::Draw(wall, src, dest, renderer);
				break;
			}
			case 4:
			{
				TextureManager::Draw(wood, src, dest, renderer);
				break;
			}
			case 5:
			{
				TextureManager::Draw(lava, src, dest, renderer);
				break;
			}
			case 6:
			{
				TextureManager::Draw(lavapop, src, dest, renderer);
				break;
			}
			default:
				break;
			}
		}
	}
}
